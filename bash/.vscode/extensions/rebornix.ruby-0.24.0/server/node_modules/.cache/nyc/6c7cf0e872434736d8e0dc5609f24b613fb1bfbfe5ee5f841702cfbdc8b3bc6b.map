{"version":3,"file":"/Users/wingrunr21/Projects/vscode-ruby/server/spec/util/Position_spec.ts","sources":["/Users/wingrunr21/Projects/vscode-ruby/server/spec/util/Position_spec.ts"],"names":[],"mappings":";;;;;AAAA,+BAA8B;AAC9B,uEAA+C;AAI/C;IACC,OAAO;QACN,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;QACpC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;KACpC,CAAC;AACH,CAAC;AAED,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACzB,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YACnC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,oBAAoB,EAAE,CAAC;YAC5C,MAAM,UAAU,GAAe;gBAC9B,GAAG;gBACH,MAAM,EAAE,GAAG;aACX,CAAC;YACF,MAAM,QAAQ,GAAG,kBAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YACrD,aAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjC,aAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YACnC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,oBAAoB,EAAE,CAAC;YAC5C,MAAM,UAAU,GAAe;gBAC9B,IAAI,EAAE,GAAG;gBACT,SAAS,EAAE,GAAG;aACd,CAAC;YACF,MAAM,QAAQ,GAAG,kBAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YACrD,aAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjC,aAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IAExC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC5D,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,oBAAoB,EAAE,CAAC;YAC5C,MAAM,QAAQ,GAAG,IAAI,kBAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACxC,aAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjC,aAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from 'chai';\nimport Position from '../../src/util/Position';\nimport { Point as TSPosition } from 'tree-sitter';\nimport { Position as VSPosition } from 'vscode-languageserver';\n\nfunction generateRandomRowCol() {\n\treturn {\n\t\trow: Math.round(Math.random() * 100),\n\t\tcol: Math.round(Math.random() * 100),\n\t};\n}\n\ndescribe('Position', () => {\n\tdescribe('fromVSPosition', () => {\n\t\tit('creates a valid Position', () => {\n\t\t\tconst { row, col } = generateRandomRowCol();\n\t\t\tconst tsPosition: TSPosition = {\n\t\t\t\trow,\n\t\t\t\tcolumn: col,\n\t\t\t};\n\t\t\tconst position = Position.fromTSPosition(tsPosition);\n\t\t\texpect(position.row).to.eql(row);\n\t\t\texpect(position.col).to.eql(col);\n\t\t});\n\t});\n\n\tdescribe('fromTSPosition', () => {\n\t\tit('creates a valid Position', () => {\n\t\t\tconst { row, col } = generateRandomRowCol();\n\t\t\tconst vsPosition: VSPosition = {\n\t\t\t\tline: row,\n\t\t\t\tcharacter: col,\n\t\t\t};\n\t\t\tconst position = Position.fromVSPosition(vsPosition);\n\t\t\texpect(position.row).to.eql(row);\n\t\t\texpect(position.col).to.eql(col);\n\t\t});\n\t});\n\n\tdescribe('tsPositionIsEqual', () => {});\n\n\tdescribe('constructor', () => {\n\t\tit('creates a new Position with the given row and col', () => {\n\t\t\tconst { row, col } = generateRandomRowCol();\n\t\t\tconst position = new Position(row, col);\n\t\t\texpect(position.row).to.eql(row);\n\t\t\texpect(position.col).to.eql(col);\n\t\t});\n\t});\n});\n"]}